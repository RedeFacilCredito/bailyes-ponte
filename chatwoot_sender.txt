// chatwoot_sender.js (Versão Corrigida)
require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const P = require('pino');
const path = require('path');

// --- Configurações ---
const SENDER_PORT = parseInt(process.env.CHATWOOT_SENDER_PORT || '3002');
const LOG_LEVEL = process.env.CHATWOOT_SENDER_LOG_LEVEL || 'info';
const PONTE_PRIMARY_API_URL = process.env.PONTE_PRIMARY_INTERNAL_API_URL || `http://localhost:${(parseInt(process.env.SERVER_PORT || '3001') + 100)}`;
const COMMAND_EXECUTOR_URL = process.env.COMMAND_EXECUTOR_URL || `http://localhost:${parseInt(process.env.COMMAND_EXECUTOR_PORT || '3003')}`;
const INTERNAL_API_SECRET = process.env.INTERNAL_API_SECRET || null;

// --- MODIFICAÇÃO: Adicionado para a busca de citações ---
const CHATWOOT_BASE_URL = process.env.CHATWOOT_BASE_URL;
const CHATWOOT_API_ACCESS_TOKEN = process.env.CHATWOOT_API_ACCESS_TOKEN;

const logger = P({ level: LOG_LEVEL }).child({ service: 'ChatwootSender' });
const app = express();
app.use(bodyParser.json());

if (!CHATWOOT_BASE_URL || !CHATWOOT_API_ACCESS_TOKEN) {
    logger.warn("ALERTA: CHATWOOT_BASE_URL ou CHATWOOT_API_ACCESS_TOKEN não definidos! A funcionalidade de citar mensagens não funcionará.");
}

function getMimeTypeFromFileName(fileName) {
    if (!fileName || typeof fileName !== 'string') return null;
    const ext = path.extname(fileName).toLowerCase();
    const mimeMap = { '.jpeg': 'image/jpeg', '.jpg': 'image/jpeg', '.png': 'image/png', '.gif': 'image/gif', '.webp': 'image/webp', '.mp3': 'audio/mpeg', '.ogg': 'audio/ogg', '.oga': 'audio/ogg', '.opus': 'audio/opus', '.aac': 'audio/aac', '.wav': 'audio/wav', '.m4a': 'audio/mp4', '.mp4': 'video/mp4', '.mpeg': 'video/mpeg', '.ogv': 'video/ogg', '.webm': 'video/webm', '.pdf': 'application/pdf', '.txt': 'text/plain', '.doc': 'application/msword', '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', '.xls': 'application/vnd.ms-excel', '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', '.ppt': 'application/vnd.ms-powerpoint', '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation' };
    return mimeMap[ext] || 'application/octet-stream';
}

app.post('/webhook/chatwoot-to-whatsapp', async (req, res) => {
    const payload = req.body;
    const webhookLogger = logger.child({
        webhook: 'chatwoot-router',
        chatwootMessageId: payload.id || 'N/A',
        conversationId: payload.conversation?.id,
    });

    webhookLogger.info('Webhook do Chatwoot recebido para roteamento.');
    webhookLogger.debug({ payload }, 'Payload completo do webhook:');

    if (payload.event !== 'message_created') {
        webhookLogger.info(`Evento '${payload.event}' ignorado.`);
        return res.status(200).send({ message: 'Evento não processado.' });
    }

    // --- CORREÇÃO DA LÓGICA DE ECO ---
    // Ignora a mensagem se ela tiver QUALQUER source_id. Isso indica que a mensagem
    // foi originada pela ponte (seja do cliente ou do seu próprio celular) e não
    // deve ser enviada de volta para o WhatsApp.
    if (payload.source_id) {
        webhookLogger.info(`Mensagem com source_id ('${payload.source_id}') detectada. Ignorando para prevenir loop.`);
        return res.status(200).send({ message: 'Eco da ponte ignorado.' });
    }
    
    if (payload.sender?.type !== 'user') {
        webhookLogger.info(`Mensagem ignorada, não foi enviada por um agente (sender.type: ${payload.sender?.type}).`);
        return res.status(200).send({ message: 'Não é mensagem de agente.' });
    }
    
    const messageContent = payload.content || "";
    const commandParts = messageContent.toLowerCase().trim().split(/\s+/);
    const commandKeyword = commandParts[0];
    const automationCommands = ['criar_caixa', 'criar_usuario'];
    const managementCommand = (process.env.WEBHOOK_COMMAND_KEYWORD || 'erga').toLowerCase();

    // Rota 1: Comando de Gerenciamento (erga)
    if (commandKeyword === managementCommand) {
        // ... Lógica de comando de gerenciamento (erga) permanece inalterada ...
        webhookLogger.info(`Comando de gerenciamento '${commandKeyword}' detectado.`);
        const instanceIdToManage = payload.inbox?.id?.toString();
        const commandTargetConversationId = payload.conversation?.id?.toString();
        const commandTargetAccountId = payload.account?.id?.toString();
        if (!instanceIdToManage || !commandTargetConversationId || !commandTargetAccountId) {
            webhookLogger.warn('[Comando erga] Dados insuficientes no payload.');
            return res.status(400).send({ error: 'Dados insuficientes no webhook para o comando erga.' });
        }
        const commandMetadata = { instanceId: instanceIdToManage, instanceChatwootInboxName: payload.inbox?.name || `Instancia_${instanceIdToManage}`, commandTargetConversationId, commandTargetAccountId, relayChatwootInboxId: parseInt(commandParts[1] || instanceIdToManage), relayChatwootAccountId: parseInt(commandParts[2] || commandTargetAccountId), triggeredBy: `Agente: ${payload.sender?.name} (Conv: ${commandTargetConversationId})` };
        try {
            await axios.post(`${PONTE_PRIMARY_API_URL}/internal-api/manage-instance`, { instanceId: instanceIdToManage, commandMetadata: commandMetadata });
            webhookLogger.info("Comando de gerenciamento encaminhado para a ponte com sucesso.");
            return res.status(202).send({ message: 'Comando de gerenciamento encaminhado.' });
        } catch (error) {
            webhookLogger.error({ err: error.message }, 'Erro ao encaminhar comando de gerenciamento para a ponte.');
            return res.status(500).send({ error: 'Falha ao contatar a ponte para gerenciamento.' });
        }
    }

    // Rota 2: Comando de Automação (criar_caixa, etc.)
    if (automationCommands.includes(commandKeyword)) {
        // ... Lógica de comando de automação permanece inalterada ...
        webhookLogger.info(`Comando de automação '${commandKeyword}' detectado. Enviando para o Executor de Comandos.`);
        const commandPayload = { command: commandKeyword, accountId: payload.account.id, conversationId: payload.conversation.id, args: commandParts.slice(1) };
        try {
            await axios.post(`${COMMAND_EXECUTOR_URL}/execute`, commandPayload);
            webhookLogger.info("Comando de automação encaminhado para o executor com sucesso.");
            return res.status(202).send({ message: 'Comando de automação encaminhado para execução.' });
        } catch (error) {
            const errorDetails = error.response ? { status: error.response.status, data: error.response.data } : error.message;
            webhookLogger.error({ err: errorDetails }, 'Erro ao encaminhar comando de automação para o executor.');
            return res.status(500).send({ error: 'Falha ao contatar o executor de comandos.' });
        }
    }

    // Rota 3: Mensagem Normal para o WhatsApp
    webhookLogger.info("Mensagem normal de agente detectada. Preparando para enviar para a Ponte WhatsApp.");
    const instanceId = payload.inbox?.id?.toString();

    // Extração robusta do destinatário (JID)
    const recipientIdentifier = payload.conversation?.meta?.sender?.identifier ||
                                payload.conversation?.contact_inbox?.source_id ||
                                payload.contact?.identifier ||
                                (payload.contact?.phone_number ? payload.contact.phone_number.replace('+', '') + '@s.whatsapp.net' : null);

    if (!recipientIdentifier) {
        webhookLogger.warn({ payload }, 'Número de telefone/JID do destinatário não encontrado no payload do webhook.');
        return res.status(400).send({ error: 'Destinatário não encontrado.' });
    }

    let mediaUrl = null, mediaTypeForBaileys = null, mediaMimetypeToSend = null, mediaFileNameToSend = null;
    let captionForMedia = payload.content || "";

    if (payload.attachments && payload.attachments.length > 0) {
        const attachment = payload.attachments[0];
        mediaUrl = attachment.data_url;
        mediaFileNameToSend = attachment.name || `midia_${Date.now()}`;
        mediaMimetypeToSend = attachment.content_type || getMimeTypeFromFileName(mediaFileNameToSend);
        mediaTypeForBaileys = attachment.file_type;
    }
    
    let quotedMessageInfo = null;
    const inReplyToId = payload.content_attributes?.in_reply_to;

    if (inReplyToId && CHATWOOT_BASE_URL && CHATWOOT_API_ACCESS_TOKEN) {
        webhookLogger.info(`Mensagem é uma resposta ao ID do Chatwoot: ${inReplyToId}. Buscando detalhes...`);
        try {
            const chatwootApi = axios.create({
                baseURL: `${CHATWOOT_BASE_URL}/api/v1/accounts/${payload.account.id}`,
                headers: { 'api_access_token': CHATWOOT_API_ACCESS_TOKEN }
            });
            const { data: originalMsgDetails } = await chatwootApi.get(`/messages/${inReplyToId}`);

            const stanzaIdForQuote = originalMsgDetails.source_id;
            if (stanzaIdForQuote) {
                webhookLogger.info(`Source ID (StanzaID) da mensagem original encontrado: ${stanzaIdForQuote}`);
                
                let participantForQuote = undefined;
                const isIncomingQuote = originalMsgDetails.message_type === 'incoming';

                if (recipientIdentifier.includes('@g.us') && isIncomingQuote) {
                    const originalSenderIdentifier = originalMsgDetails.sender?.phone_number || originalMsgDetails.contact?.phone_number;
                    if (originalSenderIdentifier) {
                         participantForQuote = `${originalSenderIdentifier.replace('+', '')}@s.whatsapp.net`;
                    }
                }
                
                quotedMessageInfo = {
                    stanzaId: stanzaIdForQuote,
                    participant: participantForQuote,
                    message: { "conversation": originalMsgDetails.content || "[Mídia]" },
                    fromMe: !isIncomingQuote,
                };
                webhookLogger.info({ quotedMessageInfoPrepared: quotedMessageInfo }, "Objeto quotedMessageInfo preparado para envio.");
            } else {
                webhookLogger.warn(`Mensagem original (ID Chatwoot: ${inReplyToId}) não possui 'source_id'. Não será possível citar.`);
            }
        } catch(error) {
            webhookLogger.error({ err: error.message }, `Falha ao buscar detalhes da mensagem citada (ID: ${inReplyToId}).`);
        }
    }

    const forwardPayload = {
        instanceId,
        recipientIdentifier,
        messageContent: captionForMedia,
        chatwootMessageId: payload.id,
        mediaUrl,
        mediaType: mediaTypeForBaileys,
        mediaMimetype: mediaMimetypeToSend,
        mediaFileName: mediaFileNameToSend,
        caption: captionForMedia,
        quotedMessageInfo // Enviará o objeto construído ou null
    };

    try {
        const headers = {};
        if (INTERNAL_API_SECRET) headers['X-Internal-Api-Secret'] = INTERNAL_API_SECRET;
        await axios.post(`${PONTE_PRIMARY_API_URL}/internal-api/send-whatsapp`, forwardPayload, { headers });
        webhookLogger.info('Mensagem encaminhada para a ponte com sucesso.');
        return res.status(202).send({ message: 'Mensagem encaminhada para a ponte.' });
    } catch (error) {
        webhookLogger.error({ err: error.message }, 'Erro ao encaminhar mensagem para a ponte.');
        return res.status(500).send({ error: 'Falha ao contatar a ponte.' });
    }
});

app.listen(SENDER_PORT, '0.0.0.0', () => { 
    logger.info(`Serviço Chatwoot Sender escutando na porta ${SENDER_PORT}`);
});
